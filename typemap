TYPEMAP

SPDConnection *  T_CONNECTION
SPDConnectionMode  T_CONNECTION_MODE
SPDPriority  T_PRIORITY
SPDDataMode  T_MODE
SPDPunctuation  T_PUNCTUATION
SPDSpelling  T_SPELLING
SPDVoiceType  T_VOICE_TYPE
voice_rate_t  T_VOICE_RATE
SPDCapitalLetters  T_CAPITAL_LETTERS

OUTPUT

T_CONNECTION
	$arg = new_sv_from_ptr ($var, \"Speech::Dispatcher\");

INPUT

T_CONNECTION
    $var = ($type)ptr_from_sv ($arg, \"Speech::Dispatcher\");

T_CONNECTION_MODE
    {
        const char *__tMp = SvPV_nolen ($arg);
        if (strEQ (__tMp, \"single\")) {
            $var = SPD_MODE_SINGLE;
        }
        else if (strEQ (__tMp, \"threaded\")) {
            $var = SPD_MODE_THREADED;
        }
        else {
            croak (\"invalid connection mode %s\", __tMp);
        }
    }

T_PRIORITY
    {
        const char *__tMp = SvPV_nolen ($arg);
        if (strEQ (__tMp, \"important\")) {
            $var = SPD_IMPORTANT;
        }
        else if (strEQ (__tMp, \"message\")) {
            $var = SPD_MESSAGE;
        }
        else if (strEQ (__tMp, \"text\")) {
            $var = SPD_TEXT;
        }
        else if (strEQ (__tMp, \"notification\")) {
            $var = SPD_NOTIFICATION;
        }
        else if (strEQ (__tMp, \"progress\")) {
            $var = SPD_PROGRESS;
        }
        else {
            croak (\"invalid priority %s\", __tMp);
        }
    }

T_MODE
	{
		const char *__tMp = SvPV_nolen ($arg);
		if (strEQ (__tMp, \"text\")) {
			$var = SPD_DATA_TEXT;
		}
		else if (strEQ (__tMp, \"ssml\")) {
			$var = SPD_DATA_SSML;
		}
		else {
			croak (\"invalid data mode %s\", __tMp);
		}
	}

T_PUNCTUATION
	{
		const char *__tMp = SvPV_nolen ($arg);
		if (strEQ (__tMp, \"all\")) {
			$var = SPD_PUNCT_ALL;
		}
		else if (strEQ (__tMp, \"none\")) {
			$var = SPD_PUNCT_NONE;
		}
		else if (strEQ (__tMp, \"some\")) {
			$var = SPD_PUNCT_SOME;
		}
		else {
			croak (\"invalid punctuation %s\", __tMp);
		}
	}

T_SPELLING
	{
		const char *__tMp = SvPV_nolen ($arg);
		if (strEQ (__tMp, \"off\")) {
			$var = SPD_SPELL_OFF;
		}
		else if (strEQ (__tMp, \"on\")) {
			$var = SPD_SPELL_ON;
		}
		else {
			croak (\"invalid spelling %s\", __tMp);
		}
	}

T_VOICE_TYPE
	{
		const char *__tMp = SvPV_nolen ($arg);
		if (strEQ (__tMp, \"male1\")) {
			$var = SPD_MALE1;
		}
		else if (strEQ (__tMp, \"male2\")) {
			$var = SPD_MALE2;
		}
		else if (strEQ (__tMp, \"male3\")) {
			$var = SPD_MALE3;
		}
		else if (strEQ (__tMp, \"female1\")) {
			$var = SPD_FEMALE1;
		}
		else if (strEQ (__tMp, \"female2\")) {
			$var = SPD_FEMALE2;
		}
		else if (strEQ (__tMp, \"female3\")) {
			$var = SPD_FEMALE3;
		}
		else if (strEQ (__tMp, \"child-male\")) {
			$var = SPD_CHILD_MALE;
		}
		else if (strEQ (__tMp, \"child-female\")) {
			$var = SPD_CHILD_FEMALE;
		}
		else {
			croak (\"invalid voice type %s\", __tMp);
		}
	}

T_VOICE_RATE
	$var = ($type)SvIV ($arg);
	if ($var < -100 || $var > 100) {
		croak (\"invalid voice rate %d - needs to be between -100 and 100\", $var);
	}

T_CAPITAL_LETTERS
	{
		const char *__tMp = SvPV_nolen ($arg);
		if (strEQ (__tMp, \"none\")) {
			$var = SPD_CAP_NONE;
		}
		else if (strEQ (__tMp, \"spell\")) {
			$var = SPD_CAP_SPELL;
		}
		else if (strEQ (__tMp, \"icon\")) {
			$var = SPD_CAP_ICON;
		}
		else {
			croak (\"invalid capital letters %s\", __tMp);
		}
	}
